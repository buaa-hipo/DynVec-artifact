--- page_rank/conflict_free/graphs/page_rank/page_rank_invec_ori.cpp	2022-01-12 11:19:10.349904013 +0800
+++ page_rank/conflict_free/graphs/page_rank/page_rank_invec.cpp	2022-01-12 16:05:25.812053547 +0800
@@ -87,7 +87,7 @@
 	  sum[i] = 0.0;
   }
 
-  long time = 0;
+  double time = 0;
 
   vfloat vzero = 0.0;
 
@@ -99,7 +99,7 @@
   struct timezone tz1, tz2;
 
 
-  do {
+  //do {
 	  step++;
 	  last_rank = rank[100];
 
@@ -109,9 +109,9 @@
 
 	  gettimeofday(&tv1, &tz1);
 
-
-
-	  for(int i=0;i<nedges/16*16;i+=16) {
+          #define TIMES 1000
+          for(int t=0;t<TIMES;++t) {
+	    for(int i=0;i<nedges/16*16;i+=16) {
                   vint vnx, vny;
                   vnx.load(n1+i);
                   vny.load(n2+i);
@@ -130,28 +130,31 @@
 
                   total_bits += 16;
 
-	  }
+	    }
 
-	  for(int j=nedges/16*16;j<nedges;j++) {
+	    for(int j=nedges/16*16;j<nedges;j++) {
 		  int nx = n1[j];
 		  int ny = n2[j];
 		  sum[ny] += rank[nx] / nneibor[nx];
-	  }
-
+	    }
+          }
 	  gettimeofday(&tv2, &tz2);
 
-	  time += tv2.tv_usec - tv1.tv_usec + 1000000 * (tv2.tv_sec - tv1.tv_sec);
+	  time += (tv2.tv_usec - tv1.tv_usec)*1e-3 + 1000 * (tv2.tv_sec - tv1.tv_sec);
 
-	  for(int i = 0; i < nnodes; i++)
-	  {
-		  rank[i] = (1 - DUMP) / nnodes + DUMP * sum[i]; 	
-	  }
+//	  for(int i = 0; i < nnodes; i++)
+//	  {
+//		  rank[i] = (1 - DUMP) / nnodes + DUMP * sum[i]; 	
+//	  }
 
-  } while(((rank[100] - last_rank) > 0.001*last_rank) || ((rank[100]-last_rank) < -1*0.001*last_rank));
+  //} while(((rank[100] - last_rank) > 0.001*last_rank) || ((rank[100]-last_rank) < -1*0.001*last_rank));
 
 
   cout << "rank[100]: " << rank[100] << endl;
-  cout << "total computing time: " << time / 1000000.0 << " sec" << endl;
+  cout << "total computing time: " << time / TIMES << " ms" << endl;
+
+  cout << "gflops: " << nedges * 1.0  * TIMES * 2 / time * 1e-6 << " Gflops" << endl;
+
   cout << "number of steps: " << step << endl;
 
   return 0;
